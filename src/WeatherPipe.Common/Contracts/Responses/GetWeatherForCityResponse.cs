using System.Text;
using System.Xml.Serialization;

namespace Course.Contracts.Contracts.Responses;

[XmlRoot("GetWeatherForCityResponse", Namespace = "http://tempuri.org/WeatherService")]
public class GetWeatherForCityResponse : IResponse
{
    [XmlElement("City")]
    public string City { get; set; } = string.Empty;
    
    [XmlElement("Country")]
    public string Country { get; set; } = string.Empty;
    
    [XmlElement("Latitude")]
    public double Latitude { get; set; }
    
    [XmlElement("Longitude")]
    public double Longitude { get; set; }

    [XmlElement("DailyForecast")]
    public List<WeatherDayResponse> DailyForecast { get; set; } = [];
    
    public override string ToString()
    {
        var forecastDetails = new StringBuilder();
        forecastDetails.AppendLine($"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {City}, {Country} –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏:");
        forecastDetails.AppendLine($"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: —à–∏—Ä–æ—Ç–∞ {Latitude}, –¥–æ–ª–≥–æ—Ç–∞ {Longitude}\n");

        foreach (var day in DailyForecast)
        {
            forecastDetails.AppendLine($"üìÖ {day.Date}:");
            forecastDetails.AppendLine($"- üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {(day.TempMin >= 0 ? "+" : "")}{day.TempMin}¬∞C –¥–æ {(day.TempMax >= 0 ? "+" : "")}{day.TempMax}¬∞C");
            forecastDetails.AppendLine($"- üåßÔ∏è –û—Å–∞–¥–∫–∏: {day.Precipitation}\n");
        }

        return forecastDetails.ToString();
    }
}
